// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateReminderRequest {
    #[prost(message, optional, tag = "1")]
    pub reminder: ::core::option::Option<NewReminder>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateReminderResponse {
    #[prost(bool, tag = "1")]
    pub created: bool,
    #[prost(message, optional, tag = "2")]
    pub reminder: ::core::option::Option<Reminder>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetAllRemindersRequest {
    #[prost(bool, optional, tag = "1")]
    pub only_active: ::core::option::Option<bool>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAllRemindersResponse {
    #[prost(message, repeated, tag = "1")]
    pub reminder: ::prost::alloc::vec::Vec<Reminder>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetReminderByIdRequest {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetReminderByIdResponse {
    #[prost(bool, tag = "1")]
    pub found: bool,
    #[prost(message, optional, tag = "2")]
    pub reminder: ::core::option::Option<Reminder>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchReminderByTitleRequest {
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchReminderByTitleResponse {
    #[prost(message, repeated, tag = "1")]
    pub reminder: ::prost::alloc::vec::Vec<Reminder>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NewReminder {
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "2")]
    pub description: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(enumeration = "Urgency", optional, tag = "3")]
    pub urgency: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "4")]
    pub deadline: ::core::option::Option<::prost_types::Timestamp>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Reminder {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(bool, tag = "2")]
    pub active: bool,
    #[prost(string, tag = "3")]
    pub title: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "4")]
    pub description: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(enumeration = "Urgency", tag = "5")]
    pub urgency: i32,
    #[prost(message, optional, tag = "6")]
    pub started: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "7")]
    pub deadline: ::core::option::Option<::prost_types::Timestamp>,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Urgency {
    Extreme = 0,
    High = 1,
    Normal = 2,
    Low = 3,
}
impl Urgency {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Urgency::Extreme => "EXTREME",
            Urgency::High => "HIGH",
            Urgency::Normal => "NORMAL",
            Urgency::Low => "LOW",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "EXTREME" => Some(Self::Extreme),
            "HIGH" => Some(Self::High),
            "NORMAL" => Some(Self::Normal),
            "LOW" => Some(Self::Low),
            _ => None,
        }
    }
}
/// Generated server implementations.
pub mod reminder_handler_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with ReminderHandlerServer.
    #[async_trait]
    pub trait ReminderHandler: std::marker::Send + std::marker::Sync + 'static {
        async fn create_reminder(
            &self,
            request: tonic::Request<super::CreateReminderRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CreateReminderResponse>,
            tonic::Status,
        >;
        /// Server streaming response type for the GetAllReminders method.
        type GetAllRemindersStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::GetAllRemindersResponse, tonic::Status>,
            >
            + std::marker::Send
            + 'static;
        async fn get_all_reminders(
            &self,
            request: tonic::Request<super::GetAllRemindersRequest>,
        ) -> std::result::Result<
            tonic::Response<Self::GetAllRemindersStream>,
            tonic::Status,
        >;
        async fn get_reminder_by_id(
            &self,
            request: tonic::Request<super::GetReminderByIdRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetReminderByIdResponse>,
            tonic::Status,
        >;
        /// Server streaming response type for the SearchReminderByTitle method.
        type SearchReminderByTitleStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<
                    super::SearchReminderByTitleResponse,
                    tonic::Status,
                >,
            >
            + std::marker::Send
            + 'static;
        async fn search_reminder_by_title(
            &self,
            request: tonic::Request<super::SearchReminderByTitleRequest>,
        ) -> std::result::Result<
            tonic::Response<Self::SearchReminderByTitleStream>,
            tonic::Status,
        >;
    }
    #[derive(Debug)]
    pub struct ReminderHandlerServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> ReminderHandlerServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for ReminderHandlerServer<T>
    where
        T: ReminderHandler,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/reminderhandler.ReminderHandler/CreateReminder" => {
                    #[allow(non_camel_case_types)]
                    struct CreateReminderSvc<T: ReminderHandler>(pub Arc<T>);
                    impl<
                        T: ReminderHandler,
                    > tonic::server::UnaryService<super::CreateReminderRequest>
                    for CreateReminderSvc<T> {
                        type Response = super::CreateReminderResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CreateReminderRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ReminderHandler>::create_reminder(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CreateReminderSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/reminderhandler.ReminderHandler/GetAllReminders" => {
                    #[allow(non_camel_case_types)]
                    struct GetAllRemindersSvc<T: ReminderHandler>(pub Arc<T>);
                    impl<
                        T: ReminderHandler,
                    > tonic::server::ServerStreamingService<
                        super::GetAllRemindersRequest,
                    > for GetAllRemindersSvc<T> {
                        type Response = super::GetAllRemindersResponse;
                        type ResponseStream = T::GetAllRemindersStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetAllRemindersRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ReminderHandler>::get_all_reminders(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetAllRemindersSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/reminderhandler.ReminderHandler/GetReminderById" => {
                    #[allow(non_camel_case_types)]
                    struct GetReminderByIdSvc<T: ReminderHandler>(pub Arc<T>);
                    impl<
                        T: ReminderHandler,
                    > tonic::server::UnaryService<super::GetReminderByIdRequest>
                    for GetReminderByIdSvc<T> {
                        type Response = super::GetReminderByIdResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetReminderByIdRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ReminderHandler>::get_reminder_by_id(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetReminderByIdSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/reminderhandler.ReminderHandler/SearchReminderByTitle" => {
                    #[allow(non_camel_case_types)]
                    struct SearchReminderByTitleSvc<T: ReminderHandler>(pub Arc<T>);
                    impl<
                        T: ReminderHandler,
                    > tonic::server::ServerStreamingService<
                        super::SearchReminderByTitleRequest,
                    > for SearchReminderByTitleSvc<T> {
                        type Response = super::SearchReminderByTitleResponse;
                        type ResponseStream = T::SearchReminderByTitleStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SearchReminderByTitleRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ReminderHandler>::search_reminder_by_title(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SearchReminderByTitleSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        Ok(
                            http::Response::builder()
                                .status(200)
                                .header("grpc-status", tonic::Code::Unimplemented as i32)
                                .header(
                                    http::header::CONTENT_TYPE,
                                    tonic::metadata::GRPC_CONTENT_TYPE,
                                )
                                .body(empty_body())
                                .unwrap(),
                        )
                    })
                }
            }
        }
    }
    impl<T> Clone for ReminderHandlerServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "reminderhandler.ReminderHandler";
    impl<T> tonic::server::NamedService for ReminderHandlerServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
